package com.javaquasar.java.core.chapter_20_Thread.example.base.timer;

/**
 * Created by Java Quasar on 16.05.17.
 */
/*TimeUnit

 Выше было рассмотрено множество утилит, большинство из которых имели конструктор которому 
 передается значение типа TimeUnit. Данный класс является перечислением и он определяет
 временное разбиение. Существуют такие значения данного перечисления:

 DAYS
 HOURS
 MINUTES
 SECONDS
 MICROSECONDS
 MILLISECONDS
 NANOSECONDS
 Несмотря на то, что мы можем указать каким способом измерять время, нет гарантии, 
 что они будут работать одинаково на всех платформах.

 В завершении

 Хотелось сказать, что данные утилиты расширяют многопоточное программирование, 
 а не заменяют классический вид. В зависимости от ситуации вы должны сами выбрать 
 как вам написать часть кода: используя параллельные утилиты или же ограничится 
 встроенными средствами типа Runable и т.д.

 Так же хотел бы обратить особое внимание на то, что большинство методов данных 
 утилит могут бросать исключения, и некоторые из которых являются проверяемые 
 компилятором. Не забывайте об этом.

 Послесловие

 Параллельные утилиты это не конец возможностям Java в вопросе многопоточия. 
 Существуют так же параллельные коллекции которые работают в синхроном режиме. 
 Они находятся в пакете java.util.concurrent. Так же с JDK 7 разработчики добавили 
 параллельное программирование. Потоки не являются полностю параллельными, 
 они используют параллелизм на основе квантование времени. Если вы хотите 
 программировать параллельно на основание многоядерных процессоров рекомендую 
 изучить структуру Fork\Join Framework (JDK7).*/

public class Test {

}
