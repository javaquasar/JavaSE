package com.javaquasar.java.core.chapter_20_Thread.semaphore;

import java.util.concurrent.*;

/**
 * Created by Java Quasar on 16.05.17.
 */
/*Semaphore (семафор)

 Основная задача семафора — управление доступом к ресурсу с помощью счетчика. Для получения 
 доступа к объекту, поток запрашивает у семафора разрешение. Если счетчик больше нуля, то 
 доступ разрешен, в противном случае потоку нужно будет ждать пока счетчик не станет больше 
 нуля. Такая тенденция дает альтернативный способ создания межпотоковой коммуникации.

 В чем же преимущества семафора? Для начало рассмотрим пример. Предположим что у нас есть два 
 потока, один создает данные, другой их получает. Важная особенность этой программы в том, 
 что второй поток должен ожидать, пока первый не создаст и не передаст сформированные данные. 
 Пример используя классический вид межпотоковых коммуникаций .

 В даном коде создается объект класса Data у которого есть два синхронизированных метода. Один 
 метод send, а другой get. Эти методы создают межпотоковую коммуникацию за счет использования 
 notify и wait. Пока один поток вошел в монитор этого объекта, второй будет ждать до тех пор, 
 пока ему не предоставят доступ (вызов notify), после чего первый поток покинет монитор и 
 предоставит доступ другому потоку.

 Задача метода get - вывести значение на терминал (то есть получить значение). Задача метода 
 send — присвоить значение полю count полученое через параметр.

 Так же в программе создаются два потока. Поток класса Senable и Getable. Обоим потокам 
 передается один и тот же объект класса Data. Задача потока Senable формировать новые значение
 и присваивать их объекту. Задача потока Getable получать данные (просто вызов метода 
 отвечающий за вывод полученных данных).

 Попробуем решить туже задачу используя семафор. Итак класс семафор имеет два контструктора

 Semaphore(int количиство)
 Semaphore(int количиство, boolean как)
 Первый конструктор указывает какому количеству потоков разрешается доступ. Второй конструктор 
 указывает количество потоков, а также в каком порядке разрешать вход в монитор. Если значение
 будет true, тогда доступ будет предостовлятся в том порядке, в котором потоки подают запрос, 
 если же значение false, то в произвольном порядке. Так же у семафора определено два важных 
 метода.

 void acquire () throws InterruptedException 
 void acquire (int количиство) throws InterruptedException 
 Первая форма метода запрашивает единичный доступ к ресурсу. Вторая форма указывает количество 
 разрешений. Если доступ не разрешен, поток приостанавливается до тех пор, пока семафор не 
 предоставит доступ.

 Второй метод напротив освобождает ресурс.

 void release() 
 void release(int количиство) 
 Зная данные методы, попробуем решить туже задачу используя семафор .

 С начало создается два объекта семафор. Один разрешает доступ одному потоку, другой не одному. 
 Это нужно для того, чтобы первый работу начал поток типа Sendable. После чего начинается 
 чередование семафоров.

 Даний пример не показывает всех возможностей семафора. Например: одно из главных преимущест 
 семафора то, что он позволяет владеть объектом одновременно нескольким потоком, а не только 
 одному. Это делается за счет инициализации счетчика в конструкторе.

 */

class Data {
	int count;
	Semaphore s1 = new Semaphore(0);
	Semaphore s2 = new Semaphore(1);

	synchronized void get() {
		try {
			s1.acquire();
			System.out.println("Get: " + count);
			s2.release();
		} catch (Exception e) {
			System.out.println("IE");
		}
	}

	synchronized void send(int tmp) {
		try {
			s2.acquire();
			count = tmp;
			System.out.println("Send: " + count);
			s1.release();
		} catch (Exception e) {
			System.out.println("IE");
		}

	}
}

class Getable implements Runnable {
	private Data d;

	Getable(Data d) {
		this.d = d;
		new Thread(this).start();
	}

	public void run() {
		while (true) {
			d.get();
		}
	}
}

class Sendable implements Runnable {
	private Data d;

	Sendable(Data d) {
		this.d = d;
		new Thread(this).start();
	}

	public void run() {
		int i = 0;
		while (true) {
			d.send(++i);
		}
	}
}

public class Test {
	public static void main(String[] args) {
		Data dt = new Data();
		new Sendable(dt);
		new Getable(dt);
	}
}
